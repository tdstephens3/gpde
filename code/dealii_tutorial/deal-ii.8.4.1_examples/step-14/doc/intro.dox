<a name="Intro"></a>
<h1>Introduction</h1>

<h3>The maths</h3>

The Heidelberg group of Professor Rolf Rannacher, to which the three initial
authors of the deal.II library belonged during their PhD time and partly also
afterwards, has been involved with adaptivity and error estimation for finite
element discretizations since the mid-1990ies. The main achievement is the
development of error estimates for arbitrary functionals of the solution, and
of optimal mesh refinement for its computation.

We will not discuss the derivation of these concepts in too great detail, but
will implement the main ideas in the present example program. For a thorough
introduction into the general idea, we refer to the seminal work of Becker and
Rannacher @ref step_14_BR95 "[BR95]",@ref step_14_BR96r "[BR96r]", and the overview article of the same authors in
Acta Numerica @ref step_14_BR01 "[BR01]"; the first introduces the concept of error
estimation and adaptivity for general functional output for the Laplace
equation, while the second gives many examples of applications of these
concepts to a large number of other, more complicated equations. For
applications to individual types of equations, see also the publications by
Becker @ref step_14_Bec95 "[Bec95]", @ref step_14_Bec98 "[Bec98]",
Kanschat @ref step_14_Kan96 "[Kan96]", @ref step_14_FK97 "[FK97]",
Suttmeier @ref step_14_Sut96 "[Sut96]", @ref step_14_RS97 "[RS97]", @ref step_14_RS98c "[RS98c]",
@ref step_14_RS99 "[RS99]",
Bangerth @ref step_14_BR99b "[BR99b]", @ref step_14_Ban00w "[Ban00w]",
@ref step_14_BR01a "[BR01a]", @ref step_14_Ban02 "[Ban02]", and
Hartmann @ref step_14_Har02 "[Har02]", @ref step_14_HH01 "[HH01]",
@ref step_14_HH01b "[HH01b]".
All of these works, from the original introduction by Becker and Rannacher to
individual contributions to particular equations, have later been summarized
in a book by Bangerth and Rannacher that covers all of these topics, see
@ref step_14_BR03 "[BR03]".


The basic idea is the following: in applications, one is not usually
interested in the solution per se, but rather in certain aspects of it. For
example, in simulations of flow problems, one may want to know the lift or
drag of a body immersed in the fluid; it is this quantity that we want to know
to best accuracy, and whether the rest of the solution of the describing
equations is well resolved is not of primary interest. Likewise, in elasticity
one might want to know about values of the stress at certain points to guess
whether maximal load values of joints are safe, for example. Or, in radiative
transfer problems, mean flux intensities are of interest.

In all the cases just listed, it is the evaluation of a functional $J(u)$ of
the solution which we are interested in, rather than the values of $u$
everywhere. Since the exact solution $u$ is not available, but only its
numerical approximation $u_h$, it is sensible to ask whether the computed
value $J(u_h)$ is within certain limits of the exact value $J(u)$, i.e. we
want to bound the error with respect to this functional, $J(u)-J(u_h)$.

For simplicity of exposition, we henceforth assume that both the quantity of
interest $J$, as well as the equation are linear, and we will in particular
show the derivation for the Laplace equation with homogeneous Dirichlet
boundary conditions, although the concept is much more general. For this
general case, we refer to the references listed above.  The goal is to obtain
bounds on the error, $J(e)=J(u)-J(u_h)$. For this, let us denote by $z$ the
solution of a dual problem, defined as follows:
@f[
  a(\varphi,z) = J(\varphi) \qquad \forall \varphi,
@f]
where $a(\cdot,\cdot)$ is the bilinear form associated with the differential
equation, and the test functions are chosen from the corresponding solution
space. Then, taking as special test function $\varphi=e$ the error, we have
that
@f[
  J(e) = a(e,z)
@f]
and we can, by Galerkin orthogonality, rewrite this as
@f[
  J(e) = a(e,z-\varphi_h)
@f]
for all possible functions $\varphi_h$ from the discrete test space.

Concretely, for Laplace's equation, the error identity reads
@f[
  J(e) = (\nabla e, \nabla(z-\varphi_h)).
@f]
For reasons that we will not explain, we do not want to use this formula as
is, but rather split the scalar products into terms on all cells, and
integrate by parts on each of them:
@f{eqnarray*}
  J(e)
  &=&
  \sum_K (\nabla (u-u_h), \nabla (z-\varphi_h))_K
  \\
  &=&
  \sum_K (-\Delta (u-u_h), z-\varphi_h)_K
  + (\partial_n (u-u_h), z-z_h)_{\partial K}.
@f}
Next we use that $-\Delta u=f$, and that $\partial_n u$ is a quantity that is
continuous almost everywhere, so the terms involving $\partial_n u$ on one
cell cancels with that on its neighbor, where the normal vector has the
opposite sign. At the boundary of the domain, where there is no neighbor cell
with which this term could cancel, the weight $z-\varphi_h$ can be chosen as
zero, since $z$ has zero boundary values, and $\varphi_h$ can be chosen to
have the same.

Thus, we have
@f{eqnarray*}
  J(e)
  &=&
  \sum_K (f+\Delta u_h, z-\varphi_h)_K
  - (\partial_n u_h, z-\varphi_h)_{\partial K\backslash \partial\Omega}.
@f}
In a final step, note that when taking the normal derivative of $u_h$, we mean
the value of this quantity as taken from this side of the cell (for the usual
Lagrange elements, derivatives are not continuous across edges). We then
rewrite the above formula by exchanging half of the edge integral of cell $K$
with the neighbor cell $K'$, to obtain
@f{eqnarray*}
  J(e)
  &=&
  \sum_K (f+\Delta u_h, z-\varphi_h)_K
  - \frac 12 (\partial_n u_h|_K + \partial_{n'} u_h|_{K'},
              z-\varphi_h)_{\partial K\backslash \partial\Omega}.
@f}
Using that for the normal vectors $n'=-n$ holds, we define the jump of the
normal derivative by
@f[
  [\partial_n u_h] := \partial_n u_h|_K + \partial_{n'} u_h|_{K'}
  =
  \partial_n u_h|_K - \partial_n u_h|_{K'},
@f]
and get the final form after setting the discrete function $\varphi_h$, which
is by now still arbitrary, to the point interpolation of the dual solution,
$\varphi_h=I_h z$:
@f{eqnarray*}
  J(e)
  &=&
  \sum_K (f+\Delta u_h, z-I_h z)_K
  - \frac 12 ([\partial_n u_h],
              z-I_h z)_{\partial K\backslash \partial\Omega}.
@f}

With this, we have obtained an exact representation of the error of the finite
element discretization with respect to arbitrary (linear) functionals
$J(\cdot)$. Its structure is a weighted form of a residual estimator, as both
$f+\Delta u_h$ and $[\partial_n u_h]$ are cell and edge residuals that vanish
on the exact solution, and $z-I_h z$ are weights indicating how important the
residuals on a certain cell is for the evaluation of the given functional.
Furthermore, it is a cell-wise quantity, so we can use it as a mesh refinement
criterion. The question, is: how to evaluate it? After all, the evaluation
requires knowledge of the dual solution $z$, which carries the information
about the quantity we want to know to best accuracy.

In some, very special cases, this dual solution is known. For example, if the
functional $J(\cdot)$ is the point evaluation, $J(\varphi)=\varphi(x_0)$, then
the dual solution has to satisfy
@f[
  -\Delta z = \delta(x-x_0),
@f]
with the Dirac delta function on the right hand side, and the dual solution is
the Green's function with respect to the point $x_0$. For simple geometries,
this function is analytically known, and we could insert it into the error
representation formula.

However, we do not want to restrict ourselves to such special cases. Rather,
we will compute the dual solution numerically, and approximate $z$ by some
numerically obtained $\tilde z$. We note that it is not sufficient to compute
this approximation $\tilde z$ using the same method as used for the primal
solution $u_h$, since then $\tilde z-I_h \tilde z=0$, and the overall error
estimate would be zero. Rather, the approximation $\tilde z$ has to be from a
larger space than the primal finite element space. There are various ways to
obtain such an approximation (see the cited literature), and we will choose to
compute it with a higher order finite element space. While this is certainly
not the most efficient way, it is simple since we already have all we need to
do that in place, and it also allows for simple experimenting. For more
efficient methods, again refer to the given literature, in particular
@ref step_14_BR95 "[BR95]", @ref step_14_BR03 "[BR03]".

With this, we end the discussion of the mathematical side of this program and
turn to the actual implementation.


<h3>The software</h3>

The step-14 example program builds heavily on the techniques already used in
the step-13 program. Its implementation of the dual weighted residual error
estimator explained above is done by deriving a second class, properly called
<code>DualSolver</code>, from the <code>Solver</code> base class, and having a class
(<code>WeightedResidual</code>) that joins the two again and controls the solution
of the primal and dual problem, and then uses both to compute the error
indicator for mesh refinement.

The program continues the modular concept of the previous example, by
implementing the dual functional, describing quantity of interest, by an
abstract base class, and providing two different functionals which implement
this interface. Adding a different quantity of interest is thus simple.

One of the more fundamental differences is the handling of data. A common case
is that you develop a program that solves a certain equation, and test it with
different right hand sides, different domains, different coefficients and
boundary values, etc. Usually, these have to match, so that exact solutions
are known, or that their combination makes sense at all.

We demonstrate a way how this can be achieved in a simple, yet very flexible
way. We will put everything that belongs to a certain setup into one class,
and provide a little C++ mortar around it, so that entire setups (domains,
coefficients, right hand sides, etc.) can be exchanged by only changing
something in <em>one</em> place.

Going this way a little further, we have also centralized all the other
parameters that describe how the program is to work in one place, such as the
order of the finite element, the maximal number of degrees of freedom, the
evaluation objects that shall be executed on the computed solutions, and so
on. This allows for simpler configuration of the program, and we will show in
a later program how to use a library class that can handle setting these
parameters by reading an input file. The general aim is to reduce the places
within a program where one may have to look when wanting to change some
parameter, as it has turned out in practice that one forgets where they are as
programs grow. Furthermore, putting all options describing what the program
does in a certain run into a file (that can be stored with the results) helps
repeatability of results more than if the various flags were set somewhere in
the program, where their exact values are forgotten after the next change to
this place.

Unfortunately, the program has become rather long. While this admittedly
reduces its usefulness as an example program, we think that it is a very good
starting point for development of a program for other kinds of problems,
involving different equations than the Laplace equation treated here.
Furthermore, it shows everything that we can show you about our way of a
posteriori error estimation, and its structure should make it simple for you
to adjust this method to other problems, other functionals, other geometries,
coefficients, etc.

The author believes that the present program is his masterpiece among the
example programs, regarding the mathematical complexity, as well as the
simplicity to add extensions. If you use this program as a basis for your own
programs, we would kindly like to ask you to state this fact and the name of
the author of the example program, Wolfgang Bangerth, in publications that
arise from that, of your program consists in a considerable part of the
example program.


<h3>Bibliography</h3>

<dl>

<dt> @anchor step_14_Ban00w [Ban00w]</dt>
<dd>Wolfgang Bangerth.
<br> Mesh adaptivity and error control for a finite element approximation
  of the elastic wave equation.
<br> In Alfredo Bermudez, Dolores Gomez, Christophe Hazard, Patrick
  Joly, and Jean E. Roberts, editors, <em>Proceedings of the Fifth
  International Conference on Mathematical and Numerical Aspects of Wave
  Propagation (Waves2000), Santiago de Compostela, Spain, 2000</em>, pages
  725&ndash;729. SIAM, 2000.



<dt> @anchor step_14_Ban02 [Ban02]</dt>
<dd>Wolfgang Bangerth.
<br> <em>Adaptive Finite Element Methods for the Identification of
  Distributed Coefficient in Partial Differential Equations</em>.
<br> PhD thesis, University of Heidelberg, 2002.



<dt> @anchor step_14_BR99b [BR99b]</dt>
<dd>Wolfgang Bangerth and Rolf Rannacher.
<br> Finite element approximation of the acoustic wave equation: Error
  control and mesh adaptation.
<br> <em>East&ndash;West J. Numer. Math.</em>, 7(4):263&ndash;282, 1999.



<dt> @anchor step_14_BR03 [BR03]</dt>
<dd>Wolfgang Bangerth and Rolf Rannacher.
<br> <em>Adaptive Finite Element Methods for Differential Equations</em>.
<br> Birkh&auml;user Verlag, Basel, 2003.



<dt> @anchor step_14_BR01a [BR01a]</dt>
<dd>Wolfgang Bangerth and Rolf Rannacher.
<br> Adaptive finite element techniques for the acoustic wave equation.
<br> <em>J. Comput. Acoustics</em>, 9(2):575&ndash;591, 2001.



<dt> @anchor step_14_BR01 [BR01]</dt>
<dd>Roland Becker and Rolf Rannacher.
<br> An optimal control approach to error estimation and mesh adaptation
  in finite element methods.
<br> <em>Acta Numerica</em>, 10:1&ndash;102, 2001.



<dt> @anchor step_14_Bec95 [Bec95]</dt>
<dd>Roland Becker.
<br> <em>An Adaptive Finite Element Method for the Incompressible
  Navier-Stokes Equations on Time-dependent Domains</em>.
<br> Dissertation, Universit&auml;t Heidelberg, 1995.



<dt> @anchor step_14_Bec98 [Bec98]</dt>
<dd>Roland Becker.
<br> Weighted error estimators for finite element approximations of the
  incompressible Navier-Stokes equations.
<br> Preprint 98-20, SFB 359, Universit&auml;t Heidelberg, 1998.



<dt> @anchor step_14_BR96r [BR96r]</dt>
<dd>Roland Becker and Rolf Rannacher.
<br> A feed-back approach to error control in finite element methods:
  Basic analysis and examples.
<br> <em>East&ndash;West J. Numer. Math.</em>, 4:237&ndash;264, 1996.



<dt> @anchor step_14_BR95 [BR95]</dt>
<dd>Roland Becker and Rolf Rannacher.
<br> Weighted a posteriori error control in FE methods.
<br> In H. G. Bock et al., ed.s, <em>ENUMATH 95</em>, pages 621&ndash;637,
  Paris, September 1998. World Scientific Publ., Singapore.
<br> in @ref step_14_enumath97 "[enumath97]".



<dt> @anchor step_14_enumath97 [enumath97]</dt>
<dd>Hans Georg Bock, Franco Brezzi, Roland Glowinsky, Guido Kanschat, Yuri A.
  Kuznetsov, Jacques Periaux, and Rolf Rannacher, editors.
<br> <em>ENUMATH 97, Proceedings of the 2nd European Conference on
  Numerical Mathematics and Advanced Applications</em>, Singapore, 1998. World
  Scientific.



<dt> @anchor step_14_FK97 [FK97]</dt>
<dd>Christian F&uuml;hrer and Guido Kanschat.
<br> A posteriori error control in radiative transfer.
<br> <em>Computing</em>, 58(4):317&ndash;334, 1997.



<dt> @anchor step_14_Har02 [Har02]</dt>
<dd>Ralf Hartmann.
<br> <em>Adaptive Finite Element Methods for the Compressible Euler Equations</em>.
<br> PhD thesis, University of Heidelberg, 2002.



<dt> @anchor step_14_HH01 [HH01]</dt>
<dd>Ralf Hartmann and Paul Houston.
<br> Adaptive discontinuous Galerkin finite element methods for
  nonlinear hyperbolic conservation laws.
<br> <em>SIAM J. Sci. Comput.</em>, 24 (2002), pp. 979-1004.



<dt> @anchor step_14_HH01b [HH01b]</dt>
<dd>Ralf Hartmann and Paul Houston.
<br> Adaptive discontinuous Galerkin finite element methods for the
  compressible Euler equations.
<br> J. Comput. Phys. 183 (2002), pp. 508-532.



<dt> @anchor step_14_Kan96 [Kan96]</dt>
<dd>Guido Kanschat.
<br> <em>Parallel and Adaptive Galerkin Methods for Radiative Transfer
  Problems</em>.
<br> Dissertation, Universit&auml;t Heidelberg, 1996.



<dt> @anchor step_14_RS97 [RS97]</dt>
<dd>Rolf Rannacher and Franz-Theo Suttmeier.
<br> A feed-back approach to error control in finite element methods:
  Application to linear elasticity.
<br> <em>Comp. Mech.</em>, 19(5):434&ndash;446, 1997.



<dt> @anchor step_14_RS98c [RS98c]</dt>
<dd>Rolf Rannacher and Franz-Theo Suttmeier.
<br> A posteriori error control in finite element methods via duality
  techniques: Application to perfect plasticity.
<br> <em>Comp. Mech.</em>, 21(2):123&ndash;133, 1998.



<dt> @anchor step_14_RS99 [RS99]</dt>
<dd>Rolf Rannacher and Franz-Theo Suttmeier.
<br> A posteriori error control and mesh adaptation for finite element
  models in elasticity and elasto-plasticity.
<br> <em>Comput. Methods Appl. Mech. Engrg.</em>, pages 333&ndash;361, 1999.



<dt> @anchor step_14_Sut96 [Sut96]</dt>
<dd>Franz-Theo Suttmeier.
<br> <em>Adaptive Finite Element Approximation of Problems in
  Elasto-Plasticity Theory</em>.
<br> Dissertation, Universit&auml;t Heidelberg, 1996.



</dl>





